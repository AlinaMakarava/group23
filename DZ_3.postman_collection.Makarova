{
	"info": {
		"_postman_id": "1e88c529-e8c3-4dfd-8346-8f8ea36f7f59",
		"name": "DZ_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"Alina\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "zadanie_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const schema = {\r",
							"            \"type\": \"object\",\"properties\": {\r",
							"                \"person\": {\"type\":\"object\",\r",
							"                    \"properties\":{\r",
							"                    \"u_age\" : {\"type\": \"integer\"},\r",
							"                \"u_name\" : {\"type\" : \"array\", \"minItems\":1, \"maxItems\":3,\r",
							"                \"items\": [\r",
							"                    {\"type\":\"string\"},\r",
							"                    {\"type\":\"integer\"},\r",
							"                    {\"type\":\"integer\"}\r",
							"                ]\r",
							"                }, \r",
							"                \"u_salary_1_5_year\" : {\"type\":\"integer\"}\r",
							"                    },\r",
							"                    \"required\":[\"u_age\",\"u_name\",\"u_salary_1_5_year\"]\r",
							"                },\r",
							"                \"qa_salary_after_12_months\": {\"type\":\"integer\"},\r",
							"                \"qa_salary_after_6_months\": {\"type\":\"integer\"},\r",
							"                \"start_qa_salary\" : {\"type\":\"integer\"},\r",
							"                    },\r",
							"                    \"required\":\r",
							"                    [\"qa_salary_after_12_months\",\"qa_salary_after_6_months\",\"start_qa_salary\"]\r",
							"                };                \r",
							"\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"var respJson = pm.response.json();\r",
							"var New_salary = respJson.person.u_salary_1_5_year;\r",
							"var resp_salary = respJson.person.u_name[1];\r",
							"\r",
							"var koef = New_salary / resp_salary;\r",
							"//console.log(koef) \r",
							"\r",
							"pm.test(\"test salary\", function () {\r",
							"        pm.expect(New_salary).to.eql(resp_salary * koef);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"New_salary\", New_salary);\r",
							"\r",
							"console.log(\"----\",pm.environment.get(\"token\"));\r",
							"\r",
							"pm.sendRequest({\r",
							"    url:\"http://162.55.220.72:5005/get_test_user\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Accept\":\"application/json\",\r",
							"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
							"    },\r",
							"    body:{\r",
							"        mode:\"formdata\",\r",
							"        formdata: [\r",
							"            {key: \"auth_token\", value: pm.environment.get(\"token\"), disabled:false},\r",
							"            {key: \"salary\", value: pm.environment.get(\"New_salary\"), disabled:false},\r",
							"            {key: \"name\", value: pm.environment.get(\"name\"), disabled:false},\r",
							"            {key: \"age\", value: pm.environment.get(\"age\"), disabled:false}      \r",
							"        ]\r",
							"    }\r",
							"},\r",
							"function (err,res) {\r",
							"    JS_data = res.json();\r",
							"    console.log(JS_data,\"Status:\"+res.status,\"Cod:\"+res.code);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : 37,\r\n    \"salary\": 500,\r\n    \"name\": \"alina\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "zadanie_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\"properties\":{\r",
							"                    \"age\" : {\"type\": \"integer\"},\r",
							"                    \"name\" : {\"type\": \"string\"},\r",
							"                    \"salary\" : {\"type\" : \"array\", \"minItems\":1, \"maxItems\":3,\r",
							"                \"items\": [\r",
							"                    {\"type\":\"integer\"},\r",
							"                    {\"type\":\"string\"},\r",
							"                    {\"type\":\"string\"},\r",
							"                ]\r",
							"    }},\r",
							"                    \"required\": [\"age\",\"name\",\"salary\"]\r",
							"                    }   \r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"var respJson = pm.response.json();\r",
							"var salary = respJson.salary[0];\r",
							"var salary_1 = respJson.salary[1];\r",
							"var salary_1_5 = respJson.salary[2];\r",
							"\r",
							"var koef = salary_1 / salary;\r",
							"var koef_1 = salary_1_5 / salary;\r",
							"\r",
							"pm.test(\"test salary_1\", function () {\r",
							"        pm.expect(salary_1).to.eql+(salary * koef);\r",
							"});\r",
							"\r",
							"pm.test(\"test salary_2\", function () {\r",
							"        pm.expect(salary_1_5 > salary).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"massiv\", function () {\r",
							"        pm.expect(salary_1_5 > salary_1).to.eql(true);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "alina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "zadanie_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"            \"type\": \"object\",\"properties\" : {\r",
							"                    \"age\" : {\"type\": \"integer\"},\r",
							"                    \"daily_food\" : {\"type\": \"number\"},\r",
							"                    \"daily_sleep\" : {\"type\": \"number\"},\r",
							"                    \"name\" : {\"type\": \"string\"}\r",
							"            },\r",
							"\"required\": [\"age\",\"daily_food\",\"daily_sleep\",\"name\"],\r",
							"            }\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"var respJson = pm.response.json();\r",
							"var weight = respJson.weight;\r",
							"var daily_food = respJson.daily_food;\r",
							"var daily_sleep = respJson.daily_sleep;\r",
							"\r",
							"pm.test(\"test daily_food\", function () {\r",
							"        pm.expect(daily_food).to.eql+(weight * 0.012);\r",
							"        });\r",
							"\r",
							"pm.test(\"test daily_sleep\", function () {\r",
							"        pm.expect(daily_sleep).to.eql+(weight * 2.5);\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "63",
							"type": "text"
						},
						{
							"key": "name",
							"value": "alina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "zadanie_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"age\": {\"type\":\"string\"},\r",
							"                \"name\": {\"type\":\"string\"},\r",
							"                \"salary\":{\"type\":\"integer\"},\r",
							"                \"family\": {\"type\":\"object\",\r",
							"                    \"properties\":{\r",
							"                    \"children\" : {\r",
							"                        \"type\": \"array\", \"minItems\":1, \"maxItems\":2,\r",
							"                \"items\":[\r",
							"                    {\"type\": \"array\"},\r",
							"                    ],\r",
							"                    \"u_salary_1_5_year\" : {\"type\":\"integer\"}\r",
							"                    },\r",
							"                    },\r",
							"                    \"required\": [\"children\",\"u_salary_1_5_year\"]\r",
							"                    },\r",
							"                \r",
							"                    },\r",
							"                \"required\":[\"age\", \"name\",\"salary\"]\r",
							"                    };\r",
							"                \r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"var respJson = pm.response.json();\r",
							"var name = respJson.name;\r",
							"var Name = pm.environment.get(\"name\");\r",
							"var age = respJson.age;\r",
							"var reqData = pm.request.body.formdata.toObject();\r",
							"var Age = reqData.age;\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"        pm.expect(name).to.eql(Name);\r",
							"        });\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"        pm.expect(age).to.eql(Age);\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "alina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "zadanie_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//var jsonData = pm.response.json();\r",
							"//var n = jsonData.length;\r",
							"//function getrandomInt(n) {\r",
							"//return Math.floor(Math.random() * n)\r",
							"//};\r",
							"//var random_int = getrandomInt(n);\r",
							"//var response_item = jsonData[random_int];\r",
							"\r",
							"//pm.environment.set(\"curr_code\", response_item.Cur_ID);\r",
							"\r",
							"//for ( var i of jsonData){\r",
							"//console.log(\"Item ==\", i[Cur_ID])\r",
							"//}\r",
							"\r",
							"//let cur_ID = Math.floor((Math.random()*510)+1);\r",
							"//console.log (cur_ID)\r",
							"\r",
							"//const cur_ID = cur_ID[Math.floor(Math.random() * cur_ID.length)];\r",
							"\r",
							"let cur_ID = Math.floor(Math.random() * this.cur_ID.length);\r",
							"console.log(cur_ID)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		}
	]
}